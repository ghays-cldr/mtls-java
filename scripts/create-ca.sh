#!/bin/bash

# Script to create a Certificate Authority (CA) for mutual TLS
# This script generates:
# - CA private key (ca-key.pem)
# - CA certificate (ca-cert.pem)
# - CA configuration file (ca.conf)
#
# Usage: ./create-ca.sh [options]

# Function to display usage
usage() {
    echo "Usage: $0 [options]"
    echo "Options:"
    echo "  -h, --help          Show this help message"
    echo "  -f, --force         Force overwrite existing CA files"
    echo "  -v, --validity DAYS Set CA certificate validity in days (default: 3650)"
    echo "  -k, --keysize SIZE  Set RSA key size (default: 4096)"
    echo "  -o, --org ORG       Set organization name (default: MyOrg)"
    echo "  -c, --country CODE  Set country code (default: US)"
    echo "  --state STATE       Set state/province (default: State)"
    echo "  --city CITY         Set city/locality (default: City)"
    echo "  --ou OU             Set organizational unit (default: Development)"
    echo "  --cn CN             Set common name (default: MyOrg Root CA)"
    echo ""
    echo "Example:"
    echo "  $0 --org \"MyCompany\" --cn \"MyCompany Root CA\" --validity 7300"
    exit 1
}

# Default configuration
FORCE_OVERWRITE=false
VALIDITY_DAYS=3650  # 10 years
KEY_SIZE=4096
ORGANIZATION="MyOrg"
COUNTRY="US"
STATE="State"
CITY="City"
OU="Development"
CN="MyOrg Root CA"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        -f|--force)
            FORCE_OVERWRITE=true
            shift
            ;;
        -v|--validity)
            VALIDITY_DAYS="$2"
            if ! [[ "$VALIDITY_DAYS" =~ ^[0-9]+$ ]]; then
                echo -e "${RED}Error: Validity days must be a number${NC}"
                exit 1
            fi
            shift 2
            ;;
        -k|--keysize)
            KEY_SIZE="$2"
            if ! [[ "$KEY_SIZE" =~ ^(2048|4096|8192)$ ]]; then
                echo -e "${RED}Error: Key size must be 2048, 4096, or 8192${NC}"
                exit 1
            fi
            shift 2
            ;;
        -o|--org)
            ORGANIZATION="$2"
            shift 2
            ;;
        -c|--country)
            COUNTRY="$2"
            if [[ ${#COUNTRY} -ne 2 ]]; then
                echo -e "${RED}Error: Country code must be 2 characters${NC}"
                exit 1
            fi
            shift 2
            ;;
        --state)
            STATE="$2"
            shift 2
            ;;
        --city)
            CITY="$2"
            shift 2
            ;;
        --ou)
            OU="$2"
            shift 2
            ;;
        --cn)
            CN="$2"
            shift 2
            ;;
        *)
            echo -e "${RED}Error: Unknown argument '$1'${NC}"
            usage
            ;;
    esac
done

# File paths
CA_KEY="./ca-key.pem"
CA_CERT="./ca-cert.pem"
CA_CONFIG="./ca.conf"
CA_SERIAL="./ca-cert.srl"

# Function to check if files already exist
check_existing_files() {
    local files_exist=false
    
    if [ -f "$CA_KEY" ]; then
        echo -e "${YELLOW}Warning: CA private key already exists: $CA_KEY${NC}"
        files_exist=true
    fi
    
    if [ -f "$CA_CERT" ]; then
        echo -e "${YELLOW}Warning: CA certificate already exists: $CA_CERT${NC}"
        files_exist=true
    fi
    
    if [ -f "$CA_CONFIG" ]; then
        echo -e "${YELLOW}Warning: CA config file already exists: $CA_CONFIG${NC}"
        files_exist=true
    fi
    
    if [ "$files_exist" = true ] && [ "$FORCE_OVERWRITE" = false ]; then
        echo -e "${RED}Error: CA files already exist. Use --force to overwrite.${NC}"
        exit 1
    elif [ "$files_exist" = true ] && [ "$FORCE_OVERWRITE" = true ]; then
        echo -e "${YELLOW}Force overwrite enabled. Removing existing CA files...${NC}"
        rm -f "$CA_KEY" "$CA_CERT" "$CA_CONFIG" "$CA_SERIAL"
    fi
}

# Function to create CA configuration file
create_ca_config() {
    echo -e "${BLUE}Creating CA configuration file...${NC}"
    
    cat > "$CA_CONFIG" << EOF
# OpenSSL CA configuration file
# Generated by create-ca.sh on $(date)

[ ca ]
default_ca = CA_default

[ CA_default ]
# Directory and file locations
dir               = .
certs             = \$dir
crl_dir           = \$dir/crl
database          = \$dir/index.txt
new_certs_dir     = \$dir
certificate       = \$dir/ca-cert.pem
serial            = \$dir/ca-cert.srl
crlnumber         = \$dir/crlnumber
crl               = \$dir/crl.pem
private_key       = \$dir/ca-key.pem
RANDFILE          = \$dir/.rand

# Certificate policies
x509_extensions   = usr_cert
copy_extensions   = copy
name_opt          = ca_default
cert_opt          = ca_default
default_days      = 365
default_crl_days  = 30
default_md        = sha256
preserve          = no
policy            = policy_match

[ policy_match ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
default_bits        = $KEY_SIZE
default_md          = sha256
default_keyfile     = ca-key.pem
distinguished_name  = ca_distinguished_name
x509_extensions     = v3_ca
string_mask         = utf8only

[ ca_distinguished_name ]
countryName                     = Country Name (2 letter code)
countryName_default             = $COUNTRY
countryName_min                 = 2
countryName_max                 = 2
stateOrProvinceName             = State or Province Name
stateOrProvinceName_default     = $STATE
localityName                    = Locality Name
localityName_default            = $CITY
0.organizationName              = Organization Name
0.organizationName_default      = $ORGANIZATION
organizationalUnitName          = Organizational Unit Name
organizationalUnitName_default  = $OU
commonName                      = Common Name
commonName_default              = $CN
commonName_max                  = 64

[ v3_ca ]
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints       = critical, CA:true
keyUsage               = critical, digitalSignature, cRLSign, keyCertSign
subjectAltName         = @alt_names

[ usr_cert ]
basicConstraints       = CA:FALSE
nsComment              = "OpenSSL Generated Certificate"
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer

[ v3_req ]
basicConstraints = CA:FALSE
keyUsage = nonRepudiation, digitalSignature, keyEncipherment

[ alt_names ]
DNS.1 = $CN
EOF

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ CA configuration file created: $CA_CONFIG${NC}"
    else
        echo -e "${RED}✗ Failed to create CA configuration file${NC}"
        exit 1
    fi
}

# Function to create CA private key
create_ca_private_key() {
    echo -e "${BLUE}Creating CA private key (${KEY_SIZE} bits)...${NC}"
    
    # Generate CA private key with proper permissions
    umask 077
    openssl genrsa -out "$CA_KEY" "$KEY_SIZE"
    
    if [ $? -eq 0 ]; then
        # Set restrictive permissions on private key
        chmod 600 "$CA_KEY"
        echo -e "${GREEN}✓ CA private key created: $CA_KEY${NC}"
    else
        echo -e "${RED}✗ Failed to create CA private key${NC}"
        exit 1
    fi
}

# Function to create CA certificate
create_ca_certificate() {
    echo -e "${BLUE}Creating CA certificate (valid for $VALIDITY_DAYS days)...${NC}"
    
    # Create CA certificate subject
    CA_SUBJECT="/C=$COUNTRY/ST=$STATE/L=$CITY/O=$ORGANIZATION/OU=$OU/CN=$CN"
    
    # Generate self-signed CA certificate
    MSYS_NO_PATHCONV=1 openssl req -new -x509 -days "$VALIDITY_DAYS" \
        -key "$CA_KEY" \
        -out "$CA_CERT" \
        -config "$CA_CONFIG" \
        -extensions v3_ca \
        -subj "$CA_SUBJECT"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ CA certificate created: $CA_CERT${NC}"
    else
        echo -e "${RED}✗ Failed to create CA certificate${NC}"
        exit 1
    fi
}

# Function to verify CA certificate
verify_ca_certificate() {
    echo -e "${BLUE}Verifying CA certificate...${NC}"
    
    # Verify the certificate
    openssl x509 -in "$CA_CERT" -text -noout > /dev/null 2>&1
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✓ CA certificate verification successful${NC}"
        
        # Display certificate information
        echo -e "${BLUE}CA Certificate Information:${NC}"
        echo "Subject: $(openssl x509 -in "$CA_CERT" -noout -subject | sed 's/subject=//')"
        echo "Issuer:  $(openssl x509 -in "$CA_CERT" -noout -issuer | sed 's/issuer=//')"
        echo "Serial:  $(openssl x509 -in "$CA_CERT" -noout -serial | sed 's/serial=//')"
        echo "Valid from: $(openssl x509 -in "$CA_CERT" -noout -startdate | sed 's/notBefore=//')"
        echo "Valid to:   $(openssl x509 -in "$CA_CERT" -noout -enddate | sed 's/notAfter=//')"
        echo "Key Usage:  $(openssl x509 -in "$CA_CERT" -noout -ext keyUsage 2>/dev/null | grep -v "Key Usage" | xargs)"
        echo "Basic Constraints: $(openssl x509 -in "$CA_CERT" -noout -ext basicConstraints 2>/dev/null | grep -v "Basic Constraints" | xargs)"
    else
        echo -e "${RED}✗ CA certificate verification failed${NC}"
        exit 1
    fi
}

# Function to initialize CA database files
initialize_ca_database() {
    echo -e "${BLUE}Initializing CA database files...${NC}"
    
    # Create index.txt file if it doesn't exist
    if [ ! -f "./index.txt" ]; then
        touch "./index.txt"
        echo -e "${GREEN}✓ Created CA database index file${NC}"
    fi
    
    # Create serial number file
    if [ ! -f "$CA_SERIAL" ]; then
        echo "01" > "$CA_SERIAL"
        echo -e "${GREEN}✓ Created CA serial number file${NC}"
    fi
    
    # Create CRL number file
    if [ ! -f "./crlnumber" ]; then
        echo "01" > "./crlnumber"
        echo -e "${GREEN}✓ Created CRL number file${NC}"
    fi
}

# Function to display final instructions
display_final_instructions() {
    echo ""
    echo -e "${GREEN}===========================================${NC}"
    echo -e "${GREEN}  Certificate Authority Created Successfully!${NC}"
    echo -e "${GREEN}===========================================${NC}"
    echo ""
    echo -e "${BLUE}Generated files:${NC}"
    echo "  • $CA_KEY     - CA private key (keep secure!)"
    echo "  • $CA_CERT    - CA certificate (distribute to clients)"
    echo "  • $CA_CONFIG  - CA configuration file"
    echo "  • index.txt   - CA database"
    echo "  • crlnumber   - CRL number file"
    echo ""
    echo -e "${BLUE}Next steps:${NC}"
    echo "  1. Keep the CA private key secure and backed up"
    echo "  2. Distribute the CA certificate to all clients/servers"
    echo "  3. Use ./create-keystore.sh to create client/server certificates"
    echo "  4. Import the CA certificate into Java truststores"
    echo ""
    echo -e "${YELLOW}Security notes:${NC}"
    echo "  • The CA private key has restrictive permissions (600)"
    echo "  • Back up the CA private key securely"
    echo "  • Consider using a passphrase for production CAs"
    echo "  • Rotate the CA certificate before expiration"
}

# Main execution
main() {
    echo -e "${BLUE}Starting Certificate Authority creation...${NC}"
    echo -e "${BLUE}Configuration:${NC}"
    echo "  Organization: $ORGANIZATION"
    echo "  Common Name: $CN"
    echo "  Country: $COUNTRY"
    echo "  State: $STATE"
    echo "  City: $CITY"
    echo "  Organizational Unit: $OU"
    echo "  Key Size: $KEY_SIZE bits"
    echo "  Validity: $VALIDITY_DAYS days"
    echo ""
    
    # Check for required tools
    if ! command -v openssl &> /dev/null; then
        echo -e "${RED}Error: OpenSSL is required but not installed${NC}"
        exit 1
    fi
    
    # Check for existing files
    check_existing_files
    
    # Create CA components
    create_ca_config
    create_ca_private_key
    create_ca_certificate
    verify_ca_certificate
    initialize_ca_database
    
    # Display final instructions
    display_final_instructions
}

# Run main function
main "$@"